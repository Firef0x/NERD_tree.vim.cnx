*NERD_tree.txt*   像妈妈一样体贴的树形插件！



    天哪，这是 ... ~

    ________  ________   _   ____________  ____     __________  ____________~
   /_  __/ / / / ____/  / | / / ____/ __ \/ __ \   /_  __/ __ \/ ____/ ____/~
    / / / /_/ / __/    /  |/ / __/ / /_/ / / / /    / / / /_/ / __/ / __/   ~
   / / / __  / /___   / /|  / /___/ _, _/ /_/ /    / / / _, _/ /___/ /___   ~
  /_/ /_/ /_/_____/  /_/ |_/_____/_/ |_/_____/    /_/ /_/ |_/_____/_____/   ~


                                 参考手册~




==============================================================================
内容                                                   *NERDTree-contents*

    1.介绍....................................|NERDTree|
    2.提供的功能..............................|NERDTreeFunctionality|
        2.1.全局命令..........................|NERDTreeGlobalCommands|
        2.2.书签..............................|NERDTreeBookmarks|
            2.2.1.书签表......................|NERDTreeBookmarkTable|
            2.2.2.书签命令....................|NERDTreeBookmarkCommands|
            2.2.3.不可用书签..................|NERDTreeInvalidBookmarks|
        2.3.NERD tree 按键绑定................|NERDTreeMappings|
        2.4.NERD tree 菜单....................|NERDTreeMenu|
    3.选项....................................|NERDTreeOptions|
        3.1.选项总结..........................|NERDTreeOptionSummary|
        3.2.选项详情..........................|NERDTreeOptionDetails|
    4.NERD tree API...........................|NERDTreeAPI|
        4.1.按键绑定 API......................|NERDTreeKeymapAPI|
        4.2.菜单 API..........................|NERDTreeMenuAPI|
    5.关于....................................|NERDTreeAbout|
    6.更新日志................................|NERDTreeChangelog|
    7.贡献者..................................|NERDTreeCredits|
    8.授权协议................................|NERDTreeLicense|

==============================================================================
1. 介绍                                                             *NERDTree*

"NERD tree"是什么??

NERD tree 可以让你浏览你的文件系统和打开文件和目录。以树形的结构显示你的文件系
统，可以让你通过鼠标或者键盘操作。它还允许你执行简单的文件系统操作。

下面的特性和功能是 NERD tree 提供的：
    * 文件和目录以树形层级结构显示
    * 为下面的节点类型提供不同的高亮：
        * 文件
        * 目录
        * 系统链接
        * windows 的 .lnk 文件
        * 只读的文件
        * 可执行的文件
    * 许多（可自定义的）绑定来操作树：
        * 打开/关闭/浏览 目录节点
        * 在新的/已经存在的窗口/标签打开文件
        * 更改当前树的根
        * 在树结构中导航
        * ...
    * 目录和文件可以被添加为书签
    * 大部分 NERD tree 的导航操作也可以使用鼠标完成
    * 过滤树的内容（可以在运行时切换）
        * 自定义的文件过滤器来阻止比如vim备份文件的显示
        * 可以选择是否显示隐藏文件（.开头的文件）
        * 可以关闭文件的显示来只看目录
    * NERD tree 窗口的位置和大小可以被自定义
    * 树形结构中节点被显示的顺序可以被自定义
    * 当你浏览的时候，创建和操作你的文件系统的模型。这样有几个好处：
        * 所有的文件系统信息被缓存并且只在需要的时候被重新读取
        * 如果你重新访问目录树中你以前的会话中访问过的部分，目录节点会被按照
          上次的方式打开/关闭
    * 插件会记住在 NERD tree 中的光标位置和窗口位置，这样你就可以把窗口隐藏（
      或者直接关闭属性窗口），当再次打开它的时候（使用 NERDTreeToggle），NERD
      tree 的窗口会以被你关闭时的状态出现
    * 你可以为每一个标签打开一个不相关的 NERD tree，或者跨标签共享树，或者混合
      使用上面两种方式
    * 默认情况下插件会覆盖默认的文件浏览器（netrw），这样你使用 :edit 编辑一个
      目录的时候一个（轻微修改）过的NERD tree 会出现在当前窗口
    * 提供一个可编程的菜单系统（在一个节点上模拟右键）
        * 默认的菜单插件来执行基本的文件系统操作（新建/删除/移动/复制 文件/目
          录）
    * 提供 API 来让你添加自己的按键绑定


==============================================================================
2. 提供的功能                                          *NERDTreeFunctionality*

------------------------------------------------------------------------------
2.1. 全局命令                                         *NERDTreeGlobalCommands*

:NERDTree [<起始目录> | <书签>]                                    *:NERDTree*
    打开一个新的 NERD tree。树的根根据参数来决定。有三种情况：如果没有提供参数
    会使用当前目录。如果指定了目录，会使用指定的目录。如果指定了书签，书签标记
    的目会被使用。例如：>
        :NERDTree /home/marty/vim7/src
        :NERDTree foo   (foo 是一个书签的名字)
<
:NERDTreeFromBookmark <书签>                           *:NERDTreeFromBookmark*
    使用 <书签> 的目录作为根目录打开一个新的 NERD tree。使用该命令而不是
     :NERDTree 的惟一原因是为了补全功能（会补全书签而不是目录）。

:NERDTreeToggle [<start-directory> | <bookmark>]             *:NERDTreeToggle*
    If a NERD tree already exists for this tab, it is reopened and rendered
    如果这个标签内已经存在一个 NERD tree 窗口，它会被重新打开和渲染。如果这个
    标签内没有 NERD tree 存在，这个命令的行为和 |:NERDTree| 一样。

:NERDTreeMirror                                              *:NERDTreeMirror*
    共享一个存在的 NERD tree，从另一个标签，到当前标签里面。
    由于是使用同一个缓冲区，当一个树改变的时候，会体现在所有的共享标签里面。

    如果只有一个另外的 NERD tree 存在，那个树被自动镜像。如果存在多个，插件会
    询问使用哪一个作为镜像。

:NERDTreeClose                                                *:NERDTreeClose*
    关闭这个标签里面的 NERD tree 。

:NERDTreeFind                                                  *:NERDTreeFind*
    在树中找到当前文件。

    如果没有树存在并且当前文件在 vim 的 CWD 中，就使用 CWD 初始化树并且显示。
    否则使用当前文件的目录初始化树。

    在任何情况下，当前文件都被显示并且光标在其上。

:NERDTreeCWD                                                    *:NERDTreeCWD*
    修改树的根节点为当前目录。如果当前标签没有 NERD tree 存在，一个新的树会被
    打开。

------------------------------------------------------------------------------
2.2. 书签                                                  *NERDTreeBookmarks*

NERD tree 中的书签是一种标记感兴趣的文件或者目录的方式。例如，你可以使用书签来
标记你所有的项目目录。

------------------------------------------------------------------------------
2.2.1. 书签表                                          *NERDTreeBookmarkTable*

如果书签表是活动状态（参见 |NERDTree-B| 和 |'NERDTreeShowBookmarks'|)，它会被渲染
到树上，你可以双击书签或者使用 |NERDTree-o| 绑定来激活他们。参见 |NERDTree-t|
和 |NERDTree-T|

------------------------------------------------------------------------------
2.2.2. 书签命令                                     *NERDTreeBookmarkCommands*

注意下面的命令只在 NERD tree 的缓冲区内可用。

:Bookmark [<名称>]
    将当前节点添加为书签 <名称> 。如果已经存在一个名字为 <名称> 的书签，它会被
    覆盖。<名称> 不能包含空格。
    如果没有提供 <名称> ，会被默认文件或者目录名。对于目录，会显示一个尾斜线。

:BookmarkToRoot <书签>
    使用 <书签> 标记的目录作为新的树的根节点。如果 <书签> 标记的树节点
    已经被缓存在树的某处，将会使用当前的树，否则一个新的树会被打开。
    注意如果 <书签> 指向一个文件，会使用它的父目录。

:RevealBookmark <书签>
    如果这个节点被缓存在当前的根下，它会被展现（即 它的祖先节点会被打开）并且
    光标在其上。

:OpenBookmark <书签>
    <书签> 必须指向一个文件。这个文件以 |NERDTree-o| 那种方式打开。如果这个节
    点被缓存在当前根下，它会被显示并且光标在其上。

:ClearBookmarks [<书签>]
    移除所有指定的书签。如果没有指定书签，会移除当前节点上的所有书签。

:ClearAllBookmarks
    移除所有书签。

:ReadBookmarks
    重新读取 |'NERDTreeBookmarksFile'| 中的书签。

参见 |:NERDTree| 和 |:NERDTreeFromBookmark| 。

------------------------------------------------------------------------------
2.2.3. 无效的书签                                   *NERDTreeInvalidBookmarks*

如果发现无效的书签，插件会现实一个错误信息并且无效书签无法被使用。

这些书签仍然会被储存在书签文件中（参见 |'NERDTreeBookmarksFile'| ）)，在底部。
可用书签和无效书签之间永远会有一个空行。

书签文件中的每一行都代表一个书签。正确的格式是：
<书签名><空格><书签位置的全路径>

After you have corrected any invalid bookmarks, either restart vim, or go
在你修复任何无效书签后，重启 vim ，或者在 NERD tree 窗口使用 :ReadBookmarks 。

------------------------------------------------------------------------------
2.3. NERD tree 按键绑定                                     *NERDTreeMappings*

默认描述~                                                         help-tag~
键~

o.......打开文件，目录和书签.....................................|NERDTree-o|
go......打开所选文件，但是把光标留在 NERDTree 中.................|NERDTree-go|
t.......在新便签打开所选的节点/书签..............................|NERDTree-t|
T.......和 t 一样，但是把光标留在当前的标签内....................|NERDTree-T|
i.......在一个新的横向分割出的窗口中打开所选文件.................|NERDTree-i|
gi......和 i 一样，但是把光标留在 NERDTree 中....................|NERDTree-gi|
s.......在一个新的竖向分割的窗口中打开所选文件...................|NERDTree-s|
gs......和 s 一样，但是把光标留在 NERDTree 中....................|NERDTree-gs|
O.......递归打开所选目录.........................................|NERDTree-O|
x.......关闭当前节点的父节点.....................................|NERDTree-x|
X.......递归关闭当前节点的所有子节点.............................|NERDTree-X|
e.......编辑当前目录.............................................|NERDTree-e|

<CR>...............和 |NERDTree-o| 一样。
double-click.......和 |NERDTree-o| 绑定一样。
middle-click.......对文件和 |NERDTree-i| 一样，对目录和 |NERDTree-e| 一样。

D.......删除当前书签..................... .......................|NERDTree-D|

P.......跳转到根节点.............................................|NERDTree-P|
p.......跳转到当前节点的父节点...................................|NERDTree-p|
K.......跳转到当前树深度的顶部节点...............................|NERDTree-K|
J.......跳转到当前树深度的底部节点...............................|NERDTree-J|
<C-J>...跳转到当前目录的下一个兄弟节点...........................|NERDTree-C-J|
<C-K>...跳转到当前目录的上一个兄弟节点...........................|NERDTree-C-K|

C.......将选定的目录设置为根节点.................................|NERDTree-C|
u.......将树的根节点的父目录设置为根节点.........................|NERDTree-u|
U.......和 u 一样，但是旧的根节点保持打开状态....................|NERDTree-U|
r.......递归刷新当前目录.........................................|NERDTree-r|
R.......递归刷新根目录...........................................|NERDTree-R|
m.......显示 NERD tree 菜单......................................|NERDTree-m|
cd......将所选节点设置为 CWD ....................................|NERDTree-cd|
CD......将所选节点设置为根节点 CWD...............................|NERDTree-CD|

I.......切换是否显示隐藏文件.....................................|NERDTree-I|
f.......切换是否使用文件过滤.....................................|NERDTree-f|
F.......切换是否显示文件.........................................|NERDTree-F|
B.......切换是否显示书签表.......................................|NERDTree-B|

q.......关闭 NERDTree 窗口.......................................|NERDTree-q|
A.......缩放（最大/最小）NERDTree 窗口...........................|NERDTree-A|
?.......切换是否显示快速帮助.....................................|NERDTree-?|

------------------------------------------------------------------------------
                                                                  *NERDTree-o*
默认绑定： o
绑定选项： NERDTreeMapActivateNode
应用对象： 文件和目录

如果一个文件节点被选中，它会在前一个窗口中被打开。

如果一个目录节点被选中，会根据它现在的状态被打开或者关闭。

如果一个标记目录的书签被选中，那个目录会成为新的根节点。

如果一个标记文件的书签被选中，那个文件会在前一个窗口中被打开。

------------------------------------------------------------------------------
                                                                 *NERDTree-go*
默认绑定： go
绑定选项： None
应用对象： 文件

如果一个文件节点被选中，它会在前一个窗口中被打开，但是光标位置不会变。

这个按键组合永远是 "g" + NERDTreeMapActivateNode （见 |NERDTree-o| ）。

------------------------------------------------------------------------------
                                                                  *NERDTree-t*
默认绑定： t
绑定选项： NERDTreeMapOpenInTab
应用对象： 文件和目录

在一个新标签中打开所选文件。如果一个目录被选中，在新标签中为该目录打开一个新的
NERD Tree 。

如果一个标记目录的书签被选中，在新标签中为该目录打开一个新的 NERD Tree 。如果
一个标记文件的书签被选中，在新标签中打开那个文件。

------------------------------------------------------------------------------
                                                                  *NERDTree-T*
默认绑定： T
绑定选项： NERDTreeMapOpenInTabSilent
应用对象： 文件和目录

和 |NERDTree-t| 一样，只不过焦点仍然保留在当前标签。

------------------------------------------------------------------------------
                                                                  *NERDTree-i*
默认绑定： i
绑定选项： NERDTreeMapOpenSplit
应用对象： 文件

在新的横向分割窗口中打开所选文件并且将光标放置在新窗口中。

------------------------------------------------------------------------------
                                                                 *NERDTree-gi*
默认绑定： gi
绑定选项： None
应用对象： 文件

和 |NERDTree-i| 一样，只不过光标不会被移动。

这个按键组合永远是 "g" + NERDTreeMapOpenSplit 的形式（见 |NERDTree-i| ）。

------------------------------------------------------------------------------
                                                                  *NERDTree-s*
默认绑定： s
绑定选项： NERDTreeMapOpenVSplit
应用对象： 文件

在新的竖直分割窗口打开所选文件并且将光标放置在新窗口中。

------------------------------------------------------------------------------
                                                                 *NERDTree-gs*
默认绑定： gs
绑定选项： None
应用对象： files.

和 |NERDTree-s| 一样，只不过光标不会被移动。

这个按键组合永远是 "g" + NERDTreeMapOpenVSplit 的形式（见 |NERDTree-s| ）。

------------------------------------------------------------------------------
                                                                  *NERDTree-O*
默认绑定： O
绑定选项： NERDTreeMapOpenRecursively
应用对象： 目录

递归打开所选目录。

所有文件和目录被缓存，但是如果一个目录由于文件过滤器
（见 |'NERDTreeIgnore'| |NERDTree-f| ）或者隐藏文件过滤器
（见 |'NERDTreeIgnore'| |NERDTree-f|）显示，那么 它的内容不会被缓存。这样有用
的，尤其是你有 .svn 目录的时候。

------------------------------------------------------------------------------
                                                                  *NERDTree-x*
默认绑定： x
绑定选项： NERDTreeMapCloseDir
应用对象： 文件和目录

关闭所选节点的父节点。

------------------------------------------------------------------------------
                                                                  *NERDTree-X*
默认绑定： X
绑定选项： NERDTreeMapCloseChildren
应用对象： 目录

递归关闭所选目录的所有子节点。

提示: 快速“重置”树，使用 |NERDTree-P| 和这个按键。

------------------------------------------------------------------------------
                                                                  *NERDTree-e*
默认绑定： e
绑定选项： NERDTreeMapOpenExpl
应用对象： files and directories.

|:edit| 所选目录，或者所选文件的目录。依据 |'NERDTreeHijackNetrw'| 的设定，可
以打开一个 NERD tree 或者 一个 netrw 。

------------------------------------------------------------------------------
                                                                  *NERDTree-D*
默认绑定： D
绑定选项： NERDTreeMapDeleteBookmark
应用对象： 书签表中的行

删除当前选中的书签。

------------------------------------------------------------------------------
                                                                  *NERDTree-P*
默认绑定： P
绑定选项： NERDTreeMapJumpRoot
应用对象： 没有限制

跳转到跟节点

------------------------------------------------------------------------------
                                                                  *NERDTree-p*
默认绑定： p
绑定选项： NERDTreeMapJumpParent
应用对象： 文件和目录

跳转到所选目录的父节点

------------------------------------------------------------------------------
                                                                  *NERDTree-K*
默认绑定： K
绑定选项： NERDTreeMapJumpFirstChild
应用对象： 文件和目录

跳转到当前节点父节点的第一个子节点

如果光标已经在第一个节点上，按照下面的做：
    * 在当前节点父节点的兄弟节点中向后查找，直到找到了一个打开的有子节点的目录
    * 跳转到那个节点的第一个子节点

------------------------------------------------------------------------------
                                                                  *NERDTree-J*
默认绑定： J
绑定选项： NERDTreeMapJumpLastChild
应用对象： 文件和目录

跳转到当前节点父节点的最后一个子节点

如果光标已经在最后一个节点上，按照下面的做：
    * 在当前节点父节点的兄弟节点中向前查找，直到找到了一个打开的有子节点的目录
    * 跳转到那个节点的最后一个子节点

------------------------------------------------------------------------------
                                                                *NERDTree-C-J*
默认绑定： <C-J>
绑定选项： NERDTreeMapJumpNextSibling
应用对象： 文件和目录

跳转到所选节点的下一个兄弟节点。

------------------------------------------------------------------------------
                                                                *NERDTree-C-K*
默认绑定： <C-K>
绑定选项： NERDTreeMapJumpPrevSibling
应用对象： 文件和目录

跳转到所选节点的前一个兄弟节点。


------------------------------------------------------------------------------
                                                                  *NERDTree-C*
默认绑定： C
绑定选项： NERDTreeMapChangeRoot
应用对象： 文件和目录

使用所选的目录节点作为新的根节点。如果被选择的是一个文件，会使用它的父节点。

------------------------------------------------------------------------------
                                                                  *NERDTree-u*
默认绑定： u
绑定选项： NERDTreeMapUpdir
应用对象： 没有限制

将树的根节点向上移动一级（就像使用了 "cd .." ）。

------------------------------------------------------------------------------
                                                                  *NERDTree-U*
默认绑定： U
绑定选项： NERDTreeMapUpdirKeepOpen
应用对象： 没有限制

和 |NERDTree-u| 一样，只不过旧的根节点保持打开。

------------------------------------------------------------------------------
                                                                  *NERDTree-r*
默认绑定： r
绑定选项： NERDTreeMapRefresh
应用对象： 文件和目录

如果选择的是目录，递归更新那个目录，即：扫描文件系统来获取更改并且显示到树中。

如果选择的是文件，上面的操作被应用到它的父节点上。

------------------------------------------------------------------------------
                                                                  *NERDTree-R*
默认绑定： R
绑定选项： NERDTreeMapRefreshRoot
应用对象： 没有限制

递归更新树的根节点。

------------------------------------------------------------------------------
                                                                  *NERDTree-m*
默认绑定： m
绑定选项： NERDTreeMapMenu
应用对象： 文件和目录

显示 NERD tree 的菜单。详见 |NERDTreeMenu| 。

------------------------------------------------------------------------------
                                                                 *NERDTree-cd*
默认绑定： cd
绑定选项： NERDTreeMapChdir
应用对象： 文件和目录

改变 vims 的当前工作目录为那个选中的节点。

------------------------------------------------------------------------------
                                                                 *NERDTree-CD*
默认绑定： CD
绑定选项： NERDTreeMapCWD
应用对象： 没有限制

将树的根节点改变为 vims 的当前工作目录。

------------------------------------------------------------------------------
                                                                  *NERDTree-I*
默认绑定： I
绑定选项： NERDTreeMapToggleHidden
应用对象： 没有限制

切换是否显示隐藏文件（即 点号开头的文件）

------------------------------------------------------------------------------
                                                                  *NERDTree-f*
默认绑定： f
绑定选项： NERDTreeMapToggleFilters
应用对象： 没有限制

切换是否使用文件过滤。详见|'NERDTreeIgnore'| 。

------------------------------------------------------------------------------
                                                                  *NERDTree-F*
默认绑定： F
绑定选项： NERDTreeMapToggleFiles
应用对象： 没有限制

切换是否显示文件。

------------------------------------------------------------------------------
                                                                  *NERDTree-B*
默认绑定： B
绑定选项： NERDTreeMapToggleBookmarks
应用对象： 没有限制

切换是否显示书签表。

------------------------------------------------------------------------------
                                                                  *NERDTree-q*
默认绑定： q
绑定选项： NERDTreeMapQuit
应用对象： 没有限制

关闭 NERDTree 窗口。

------------------------------------------------------------------------------
                                                                  *NERDTree-A*
默认绑定： A
绑定选项： NERDTreeMapToggleZoom
应用对象： 没有限制

缩放（最大/最小）NERDTree 窗口。

------------------------------------------------------------------------------
                                                                  *NERDTree-?*
默认绑定： ?
绑定选项： NERDTreeMapHelp
应用对象： 没有限制

切换是否显示快速帮助。

------------------------------------------------------------------------------
2.3. NERD tree 菜单                                             *NERDTreeMenu*

NERD tree 有一个可以通过 API 编程的菜单（见 |NERDTreeMenuAPI| ）。这个主意是为
了模拟大多数文件浏览器都具有的右键菜单。

这个插件有两个默认菜单插件：exec_menuitem.vim 和 fs_menu.vim。fs_menu.vim 添加
一些基本的 新建/删除/移动/复制 文件和目录的操作。exec_menuitem.vim 提供了一个
菜单项来执行可执行文件。

相关标签: |NERDTree-m| |NERDTreeApi|

==============================================================================
3. 自定义                                                    *NERDTreeOptions*


------------------------------------------------------------------------------
3.1. 自定义总结                                        *NERDTreeOptionSummary*

提供下面的选项，可以自定义 NERD tree 的行为。这些选项需要被设置在 vimrc 中。

|'loaded_nerd_tree'|            关闭插件。

|'NERDTreeAutoCenter'|          当光标移动到距离顶部/底部指定的距离的时候，控
                                制 NERD tree 是否将光标所在位置自动设置为窗口的
                                中心。

|'NERDTreeAutoCenterThreshold'| 控制自动将光标位置居中的敏感度。

|'NERDTreeCaseSensitiveSort'|   告诉 NERD tree 排序节点的时候是否大小写敏感。

|'NERDTreeSortHiddenFirst'|     告诉 NERD tree 排序节点的时候是否考虑隐藏文件
                                开头的点号。

|'NERDTreeChDirMode'|           告诉 NERD tree 什么情况下/什么时候它应该改变当
                                前工作目录。

|'NERDTreeHighlightCursorline'| 告诉 NERD tree 是否高亮光标所在行。

|'NERDTreeHijackNetrw'|         告诉 NERD tree 是否替换 netrw 来浏览本地目录。

|'NERDTreeIgnore'|              告诉 NERD tree 忽略哪些文件。

|'NERDTreeRespectWildIgnore'|   告诉 NERD tree 是否考虑 |'wildignore'| 。

|'NERDTreeBookmarksFile'|       指定书签存储位置。

|'NERDTreeBookmarksSort'|       显示书签的时候是否排序。

|'NERDTreeMouseMode'|           告诉 NERD tree 如何处理鼠标点击。

|'NERDTreeQuitOnOpen'|          打开文件后关闭树窗口。

|'NERDTreeShowBookmarks'|       告诉 NERD tree 启动时是否显示书签。

|'NERDTreeShowFiles'|           告诉 NERD tree 启动时是否显示文件。

|'NERDTreeShowHidden'|          告诉 NERD tree 启动时是否显示隐藏文件。

|'NERDTreeShowLineNumbers'|     告诉 NERD tree 树窗口中是否显示行号。

|'NERDTreeSortOrder'|           告诉 NERD tree 如何排序节点。

|'NERDTreeStatusline'|          给 NERD tree 窗口设置一个状态栏。

|'NERDTreeWinPos'|              告诉插件把 NERD tree 窗口放置在哪儿。

|'NERDTreeWinSize'|             设置 NERD tree 窗口被打开时的大小。

|'NERDTreeMinimalUI'|           禁止显示 'Bookmarks' 和 'Press ? for help'

|'NERDTreeDirArrows'|           告诉 NERD tree 显示目录的时候使用箭头代替 + ~ 。

|'NERDTreeCascadeOpenSingleChildDir'|
                                当所选目录只有一个子节点并且该节点是目录的时候，
                                级联展开。

|'NERDTreeAutoDeleteBuffer'|    告诉 NERD tree 当文件被上下文菜单命令删除或重命
                                名的时候，自动移除缓冲区。

------------------------------------------------------------------------------
3.2. 自定义详细描述                                    *NERDTreeOptionDetails*

把给出的行加到你的 ~/.vimrc 来开启下面的选项

                                                          *'loaded_nerd_tree'*
如果这个插件让你觉得想杀人，在你的 vimrc 中使用这行设置来关闭它： >
    let loaded_nerd_tree=1
<

------------------------------------------------------------------------------
                                                        *'NERDTreeAutoCenter'*
取值范围： 0 或 1
默认值： 1

如果设置为1，当光标移动到距顶部/底部的行数是 |'NERDTreeAutoCenterThreshold'|
指定的行范围以内的时候，NERD tree 窗口会将光标所在位置自动设置为窗口的中心。

这个选项只会对树导航绑定作出反应，即：
|NERDTree-J| |NERDTree-K| |NERDTree-C-J| |NERDTree-C-K| |NERDTree-p|
|NERDTree-P|

使用 |zz| 操作来居中。

------------------------------------------------------------------------------
                                               *'NERDTreeAutoCenterThreshold'*
取值范围： 任何自然数。
默认值： 3

这个选项控制自动居中的敏感度，详见 |'NERDTreeAutoCenter'| 。

------------------------------------------------------------------------------
                                                 *'NERDTreeCaseSensitiveSort'*
取值范围： 0 或 1
默认值： 0

默认情况下 NERD tree 排序节点的时候并不是大小写敏感的，即节点会像这样排序： >
    bar.c
    Baz.c
    blarg.c
    boner.c
    Foo.c
<
但是，如果你把选项设置为1，上面的节点会按下面的方式排序： >
    Baz.c
    Foo.c
    bar.c
    blarg.c
    boner.c
<
------------------------------------------------------------------------------
                                                         *'NERDTreeChDirMode'*

取值范围： 0，1 或 2
默认值： 0

用这个选项告诉插件什么时候（如果真的需要）改变 vim 的当前工作目录（ CWD ）。

如果设置为0，CWD 永远不会被 NERD tree 改变。

如果设置为1，CWD 会在第一次加载 NERD tree 的时候被改变为它初始化的目录。比如：
如果你使用下面的命令启动 NERD tree ： >
    :NERDTree /home/marty/foobar
<
然后 CWD 会被改变为 /home/marty/foobar 并且不会被再次改变除非你使用相似的命令
初始化了另一个 NERD tree 。

如果这个选项被设置为2，插件的行为和被设置为1类似，只不过当树的根目录被改变的时
候 CWD 也会被改变。例如，如果 CWD 是 /home/marty/foobar 并且你把
/home/marty/foobar/baz 设置为了新的根节点，CWD 也会被改变为
/home/marty/foobar/baz 。

------------------------------------------------------------------------------
                                               *'NERDTreeHighlightCursorline'*
取值范围： 0 或 1
默认值： 1

如果设置为1，NERD tree 缓冲区内的当前光标所在行会被高亮，使用 |'cursorline'|
来完成。

------------------------------------------------------------------------------
                                                       *'NERDTreeHijackNetrw'*
取值范围： 0 或 1
默认值： 1

如果设置为1，当执行 >
    :edit <some directory>
<
会在目标窗口打开一个“从属”的 NERD tree 来代替 netrw 。

“从属”的 NERD tree 在下面几个方面和普通的有所区别：
    1. 'o' 会在和树同一个窗口打开文件，替换掉当前打开的内容。
    2. 在同一个标签内你可以有任意多的“从属”的 NERD tree 。

------------------------------------------------------------------------------
                                                            *'NERDTreeIgnore'*
取值范围： 正则表达式列表
默认值： ['\~$']

这个选项用来指定哪些文件会被 NERD tree 忽略。它必须是一个正则表达式的列表。当
NERD tree 被渲染的时候，被 'NERDTreeIgnore' 中的正则表达式匹配的任何文件/目录
都不会被显示。

例如你把下面的设置放到你的 vimrc 中： >
    let NERDTreeIgnore=['\.vim$', '\~$']
<
所有以 .vim 或 ~ 结尾的文件都会被忽略。

有两个魔法标志可以添加到每一个正则表达式后面来指定这个正则表达式只能被用于匹配
文件或者只能被用于匹配目录。这些标志是 "[[dir]]" 和 "[[file]]"，例如： >
    let NERDTreeIgnore=['.d$[[dir]]', '.o$[[file]]']
<
会导致所有以 ".d" 结尾的目录会被忽略，所有以 ".o" 结尾的目录会被忽略。

注意：告诉 NERD tree 不要忽略任何文件，你必须用下面这种设置。 >
    let NERDTreeIgnore=[]
<

文件过滤器可以被 |NERDTree-f| 绑定动态的打开或关闭。

------------------------------------------------------------------------------
                                                *'NERDTreeRespectWildIgnore'*
取值范围： 0 或 1
默认值： 0

如果设置为1，会考虑 |'wildignore'| 选项。

------------------------------------------------------------------------------
                                                     *'NERDTreeBookmarksFile'*
取值范围： a path
默认值： $HOME/.NERDTreeBookmarks

指定书签存储位置。见 |NERDTreeBookmarkCommands| 。

------------------------------------------------------------------------------
                                                     *'NERDTreeBookmarksSort'*
取值范围： 0 或 1
默认值： 1

设置为0，书签列表不会被排序。
设置为1，书签列表会被排序。

------------------------------------------------------------------------------
                                                       *'NERDTreeMouseMode'*
取值范围： 1，2 或 3
默认值： 1

如果设置为1，双击一个节点会打开它。
如果设置为2，单击一个节点会打开目录节点，文件节点需要双击才会打开。
如果设置为2，单击会打开任何类型的节点。

注意：双击树节点所在行的任何位置都会激活它，但是所有单击激活必须单击节点名称。
例如，如果有下面的节点： >
    | | |-application.rb
<
那么 (单击激活) 你必须单击 'application.rb' 中的某个地方。

------------------------------------------------------------------------------
                                                        *'NERDTreeQuitOnOpen'*

取值范围： 0 或 1
默认值： 0

如果设置为1，NERD tree 窗口会在用下面的绑定打开文件后被关闭： |NERDTree-o| ，
|NERDTree-i| ， |NERDTree-t| 和 |NERDTree-T| 。

------------------------------------------------------------------------------
                                                     *'NERDTreeShowBookmarks'*
取值范围： 0 或 1
默认值： 0

如果选项设置为1，会显示书签表。

这个选项可以被每个树动态切换，使用 |NERDTree-B| 的按键绑定。

------------------------------------------------------------------------------
                                                         *'NERDTreeShowFiles'*
取值范围： 0 或 1
默认值： 1

如果这个选项被设置为1，会在 NERD tree 中显示文件。如果设置为0，只有目录被显示。

这个选项可以被每个树动态切换，使用 |NERDTree-F| 的按键绑定，并且在你需要导
航到树的某个部分的时候可以大幅缩减树的节点。

------------------------------------------------------------------------------
                                                        *'NERDTreeShowHidden'*
取值范围： 0 或 1
默认值： 0

这个选项告诉 vim 是否默认显示隐藏文件。这个选项可以被每个树动态改变，使用
|NERDTree-I| 的按键绑定。使用下面的方式来设置这个选项。 >
    let NERDTreeShowHidden=0
    let NERDTreeShowHidden=1
<

------------------------------------------------------------------------------
                                                   *'NERDTreeShowLineNumbers'*
取值范围： 0 或 1
默认值： 0

这个选项用来告诉 vim 是否为 NERD tree 窗口显示行号。使用下面的方式来设置： >
    let NERDTreeShowLineNumbers=0
    let NERDTreeShowLineNumbers=1
<

------------------------------------------------------------------------------
                                                         *'NERDTreeSortOrder'*
取值范围： 正则表达式列表
默认值： ['\/$', '*', '\.swp$',  '\.bak$', '\~$']

这个选项中设置的正则表达式列表用来指定父节点下子节点的顺序。

例如，如果这些选项被设置为： >
    ['\.vim$', '\.c$', '\.h$', '*', 'foobar']
<
那么所有的 .vim 文件会被放置在顶部，接着是 .c 文件，让后是所有 .h 文件。所有包
含字符串 'foobar' 的文件会被放置在底部。星号是一个特殊的标志：它告诉脚本每一个
不匹配任何正则表达式的节点应该被放在这里。

如果 'NERDTreeSortOrder' 选项中没有星号，会在数组末尾自动添加一个。

正则表达式 '\/$' 用来匹配目录。

排序完成后，每一个组组内的文件被按字母序排序。

其它例子： >
    (1) ['*', '\/$']
    (2) []
    (3) ['\/$', '\.rb$', '\.php$', '*', '\.swp$',  '\.bak$', '\~$']
<
1. 目录在最后，其它所有在前面。
2. 任何节点都会按字母序出现。
3. 目录在前面，接着是 ruby 和 php 文件。交换文件，备份文件和 vim 备份文件跟随
   在其它所有文件后面。

------------------------------------------------------------------------------
                                                        *'NERDTreeStatusline'*
取值范围： 任何可用的状态栏设置
默认值： %{b:NERDTreeRoot.path.strForOS(0)}

告诉插件为 NERD tree 窗口使用 |'statusline'| 设置。

注意状态栏是使用 |:let-&| 而不是 |:set| 所以不用转义空格。

将这个选项设置为-1会禁止它，这样就可以使用你自己的全局状态栏设置。

------------------------------------------------------------------------------
                                                            *'NERDTreeWinPos'*
取值范围： "left" 或 "right"
默认值： "left"

这个选项用来决定 NERD tree 窗口被显示在屏幕的什么位置。

这个选项使同时使用两个浏览插件成为可能。例如，你可以在左侧显示 taglist 插件的
窗口，右侧显示 NERD tree 的窗口。

------------------------------------------------------------------------------
                                                           *'NERDTreeWinSize'*
取值范围： 正整数
默认值： 31

这个选项用来改变 NERD tree 窗口在加载时的大小。

------------------------------------------------------------------------------
                                                         *'NERDTreeMinimalUI'*
取值范围： 0 或 1
默认值： 0

这个选项禁止 NERD tree 窗口显示 'Bookmarks' 和 'Press ? for help' 文本，
使用下面的方式来设置这个选项： >
    let NERDTreeMinimalUI=0
    let NERDTreeMinimalUI=1
<

------------------------------------------------------------------------------
                                                         *'NERDTreeDirArrows'*
取值范围： 0 或 1
默认值： 0

这个选项用来改变树中目录节点的默认外观。当这个选项设置为0的时候，会使用老式的
长条(|)，+，~ 字符。当设置为1的时候使用右箭头和下箭头。使用下面方式设置这个选
项： >
    let NERDTreeDirArrows=0
    let NERDTreeDirArrows=1
<

------------------------------------------------------------------------------
                                         *'NERDTreeCascadeOpenSingleChildDir'*
取值范围： 0 或 1
默认值： 1

当打开目录节点的时候，这个选项告诉 NERDTree 来递归的打开只有一个目录类型子节点
目录。当找到一个包含任何类型的节点，但不是单独的目录的时候，NERDTree 会停止递
归。这个选项可以导致 |NERDTree-x| 绑定以同样地方式关闭目录。这个选项对于Java工
程很有用。使用下面的方式来设置这个选项： >
    let NERDTreeCascadeOpenSingleChildDir=0
    let NERDTreeCascadeOpenSingleChildDir=1
<

------------------------------------------------------------------------------
                                                  *'NERDTreeAutoDeleteBuffer'*
取值范围： 0 或 1
默认值： 0

当使用上下文菜单来删除或重命名文件的时候可能你也想删除那个不再可用的缓冲区。这
个选项没有被设置的时候，你删除询问你是否真的想删除旧的缓冲区的提醒。如果你总是
按 'y' 那么可以把这个选项设置为1。使用下面的方式来设置这个选项： >
    let NERDTreeAutoDeleteBuffer=0
    let NERDTreeAutoDeleteBuffer=1
<

==============================================================================
4. The NERD tree API                                             *NERDTreeAPI*

The NERD tree script allows you to add custom key mappings and menu items via
a set of API calls. Any scripts that use this API should be placed in
~/.vim/nerdtree_plugin/ (*nix) or ~/vimfiles/nerdtree_plugin (windows).

The script exposes some prototype objects that can be used to manipulate the
tree and/or get information from it: >
    g:NERDTreePath
    g:NERDTreeDirNode
    g:NERDTreeFileNode
    g:NERDTreeBookmark
<
See the code/comments in NERD_tree.vim to find how to use these objects. The
following code conventions are used:
    * class members start with a capital letter
    * instance members start with a lower case letter
    * private members start with an underscore

See this blog post for more details:
 http://got-ravings.blogspot.com/2008/09/vim-pr0n-prototype-based-objects.html

------------------------------------------------------------------------------
4.1. Key map API                                           *NERDTreeKeymapAPI*

NERDTreeAddKeyMap({options})                             *NERDTreeAddKeyMap()*
    Adds a new keymapping for all NERD tree buffers.
    {options} must be a dictionary, and must contain the following keys:
    "key" - the trigger key for the new mapping
    "callback" - the function the new mapping will be bound to
    "quickhelpText" - the text that will appear in the quickhelp (see
    |NERDTree-?|)
    "override" - if 1 then this new mapping will override whatever previous
    mapping was defined for the key/scope combo. Useful for overriding the
    default mappings.

    Additionally, a "scope" argument may be supplied. This constrains the
    mapping so that it is only activated if the cursor is on a certain object.
    That object is then passed into the handling method. Possible values are:
        "FileNode" - a file node
        "DirNode" - a directory node
        "Node" - a file or directory node
        "Bookmark" - A bookmark
        "all" - the keymap is not constrained to any scope (default). When
        thei is used, the handling function is not passed any arguments.


    Example: >
        call NERDTreeAddKeyMap({
               \ 'key': 'foo',
               \ 'callback': 'NERDTreeCDHandler',
               \ 'quickhelpText': 'echo full path of current node',
               \ 'scope': 'DirNode' })

        function! NERDTreeCDHandler(dirnode)
            call a:dirnode.changeToDir()
        endfunction
<
    This code should sit in a file like ~/.vim/nerdtree_plugin/mymapping.vim.
    It adds a (redundant) mapping on 'foo' which changes vim's CWD to that of
    the current dir node. Note this mapping will only fire when the cursor is
    on a directory node.

------------------------------------------------------------------------------
4.2. Menu API                                                *NERDTreeMenuAPI*

NERDTreeAddSubmenu({options})                           *NERDTreeAddSubmenu()*
    Creates and returns a new submenu.

    {options} must be a dictionary and must contain the following keys:
    "text" - the text of the submenu that the user will see
    "shortcut" - a shortcut key for the submenu (need not be unique)

    The following keys are optional:
    "isActiveCallback" - a function that will be called to determine whether
    this submenu item will be displayed or not. The callback function must return
    0 或 1.
    "parent" - the parent submenu of the new submenu (returned from a previous
    invocation of NERDTreeAddSubmenu()). If this key is left out then the new
    submenu will sit under the top level menu.

    See below for an example.

NERDTreeAddMenuItem({options})                         *NERDTreeAddMenuItem()*
    Adds a new menu item to the NERD tree menu (see |NERDTreeMenu|).

    {options} must be a dictionary and must contain the
    following keys:
    "text" - the text of the menu item which the user will see
    "shortcut" - a shortcut key for the menu item (need not be unique)
    "callback" - the function that will be called when the user activates the
    menu item.

    The following keys are optional:
    "isActiveCallback" - a function that will be called to determine whether
    this menu item will be displayed or not. The callback function must return
    0 或 1.
    "parent" - if the menu item belongs under a submenu then this key must be
    specified. This value for this key will be the object that
    was returned when the submenu was created with |NERDTreeAddSubmenu()|.

    See below for an example.

NERDTreeAddMenuSeparator([{options}])             *NERDTreeAddMenuSeparator()*
    Adds a menu separator (a row of dashes).

    {options} is an optional dictionary that may contain the following keys:
    "isActiveCallback" - see description in |NERDTreeAddMenuItem()|.

Below is an example of the menu API in action. >
    call NERDTreeAddMenuSeparator()

    call NERDTreeAddMenuItem({
                \ 'text': 'a (t)op level menu item',
                \ 'shortcut': 't',
                \ 'callback': 'SomeFunction' })

    let submenu = NERDTreeAddSubmenu({
                \ 'text': 'a (s)ub menu',
                \ 'shortcut': 's' })

    call NERDTreeAddMenuItem({
                \ 'text': '(n)ested item 1',
                \ 'shortcut': 'n',
                \ 'callback': 'SomeFunction',
                \ 'parent': submenu })

    call NERDTreeAddMenuItem({
                \ 'text': '(n)ested item 2',
                \ 'shortcut': 'n',
                \ 'callback': 'SomeFunction',
                \ 'parent': submenu })
<
This will create the following menu: >
  --------------------
  a (t)op level menu item
  a (s)ub menu
<
Where selecting "a (s)ub menu" will lead to a second menu: >
  (n)ested item 1
  (n)ested item 2
<
When any of the 3 concrete menu items are selected the function "SomeFunction"
will be called.

------------------------------------------------------------------------------
NERDTreeRender()                                            *NERDTreeRender()*
    Re-renders the NERD tree buffer. Useful if you change the state of the
    tree and you want to it to be reflected in the UI.

==============================================================================
5. About                                                       *NERDTreeAbout*

The author of the NERD tree is a terrible terrible monster called Martyzilla
who gobbles up small children with milk and sugar for breakfast.

He can be reached at martin.grenfell at gmail dot com. He would love to hear
from you, so feel free to send him suggestions and/or comments about this
plugin.  Don't be shy --- the worst he can do is slaughter you and stuff you in
the fridge for later ;)

The latest stable versions can be found at
    http://www.vim.org/scripts/script.php?script_id=1658

The latest dev versions are on github
    http://github.com/scrooloose/nerdtree


==============================================================================
6. Changelog                                               *NERDTreeChangelog*

Next
    - add 'scope' argument to the key map API
    - add NERDTreeCustomIgnoreFilter hook - needs doc
    - add magic [[dir]] and [[file]] flags to NERDTreeIgnore

4.2.0
    - Add NERDTreeDirArrows option to make the UI use pretty arrow chars
      instead of the old +~| chars to define the tree structure (sickill)
    - shift the syntax highlighting out into its own syntax file (gnap)
    - add some mac specific options to the filesystem menu - for macvim
      only (andersonfreitas)
    - Add NERDTreeMinimalUI option to remove some non functional parts of the
      nerdtree ui (camthompson)
    - tweak the behaviour of :NERDTreeFind - see :help :NERDTreeFind for the
      new behaviour (benjamingeiger)
    - if no name is given to :Bookmark, make it default to the name of the
      target file/dir (minyoung)
    - use 'file' completion when doing copying, create, and move
      operations (EvanDotPro)
    - lots of misc bug fixes (paddyoloughlin, sdewald, camthompson, Vitaly
      Bogdanov, AndrewRadev, mathias, scottstvnsn, kml, wycats, me RAWR!)

4.1.0
    features:
    - NERDTreeFind to reveal the node for the current buffer in the tree,
      see |NERDTreeFind|. This effectively merges the FindInNERDTree plugin (by
      Doug McInnes) into the script.
    - make NERDTreeQuitOnOpen apply to the t/T keymaps too. Thanks to Stefan
      Ritter and Rémi Prévost.
    - truncate the root node if wider than the tree window. Thanks to Victor
      Gonzalez.

    bugfixes:
    - really fix window state restoring
    - fix some win32 path escaping issues. Thanks to Stephan Baumeister, Ricky,
      jfilip1024, and Chris Chambers

4.0.0
    - add a new programmable menu system (see :help NERDTreeMenu).
    - add new APIs to add menus/menu-items to the menu system as well as
      custom key mappings to the NERD tree buffer (see :help NERDTreeAPI).
    - removed the old API functions
    - added a mapping to maximize/restore the size of nerd tree window, thanks
      to Guillaume Duranceau for the patch. See :help NERDTree-A for details.

    - fix a bug where secondary nerd trees (netrw hijacked trees) and
      NERDTreeQuitOnOpen didnt play nicely, thanks to Curtis Harvey.
    - fix a bug where the script ignored directories whose name ended in a dot,
      thanks to Aggelos Orfanakos for the patch.
    - fix a bug when using the x mapping on the tree root, thanks to Bryan
      Venteicher for the patch.
    - fix a bug where the cursor position/window size of the nerd tree buffer
      wasnt being stored on closing the window, thanks to Richard Hart.
    - fix a bug where NERDTreeMirror would mirror the wrong tree

3.1.1
    - fix a bug where a non-listed no-name buffer was getting created every
      time the tree windows was created, thanks to Derek Wyatt and owen1
    - make <CR> behave the same as the 'o' mapping
    - some helptag fixes in the doc, thanks strull
    - fix a bug when using :set nohidden and opening a file where the previous
      buf was modified. Thanks iElectric
    - other minor fixes

3.1.0
    New features:
    - add mappings to open files in a vsplit, see :help NERDTree-s and :help
      NERDTree-gs
    - make the statusline for the nerd tree window default to something
      hopefully more useful. See :help 'NERDTreeStatusline'
    Bugfixes:
    - make the hijack netrw functionality work when vim is started with "vim
      <some dir>" (thanks to Alf Mikula for the patch).
    - fix a bug where the CWD wasnt being changed for some operations even when
      NERDTreeChDirMode==2 (thanks to Lucas S. Buchala)
    - add -bar to all the nerd tree :commands so they can chain with other
      :commands (thanks to tpope)
    - fix bugs when ignorecase was set (thanks to nach)
    - fix a bug with the relative path code (thanks to nach)
    - fix a bug where doing a :cd would cause :NERDTreeToggle to fail (thanks nach)


3.0.1
    Bugfixes:
    - fix bugs with :NERDTreeToggle and :NERDTreeMirror when 'hidden
      was not set
    - fix a bug where :NERDTree <path> would fail if <path> was relative and
      didnt start with a ./ or ../  Thanks to James Kanze.
    - make the q mapping work with secondary (:e <dir>  style) trees,
      thanks to jamessan
    - fix a bunch of small bugs with secondary trees

    More insane refactoring.

3.0.0
    - hijack netrw so that doing an :edit <directory>  will put a NERD tree in
      the window rather than a netrw browser. See :help 'NERDTreeHijackNetrw'
    - allow sharing of trees across tabs, see :help :NERDTreeMirror
    - remove "top" and "bottom" as valid settings for NERDTreeWinPos
    - change the '<tab>' mapping to 'i'
    - change the 'H' mapping to 'I'
    - lots of refactoring

==============================================================================
7. Credits                                                   *NERDTreeCredits*

Thanks to the following people for testing, bug reports, ideas etc. Without
you I probably would have got bored of the hacking the NERD tree and
just downloaded pr0n instead.

    Tim Carey-Smith (halorgium)
    Vigil
    Nick Brettell
    Thomas Scott Urban
    Terrance Cohen
    Yegappan Lakshmanan
    Jason Mills
    Michael Geddes (frogonwheels)
    Yu Jun
    Michael Madsen
    AOYAMA Shotaro
    Zhang Weiwu
    Niels Aan de Brugh
    Olivier Yiptong
    Zhang Shuhan
    Cory Echols
    Piotr Czachur
    Yuan Jiang
    Matan Nassau
    Maxim Kim
    Charlton Wang
    Matt Wozniski (godlygeek)
    knekk
    Sean Chou
    Ryan Penn
    Simon Peter Nicholls
    Michael Foobar
    Tomasz Chomiuk
    Denis Pokataev
    Tim Pope (tpope)
    James Kanze
    James Vega (jamessan)
    Frederic Chanal (nach)
    Alf Mikula
    Lucas S. Buchala
    Curtis Harvey
    Guillaume Duranceau
    Richard Hart (hates)
    Doug McInnes
    Stefan Ritter
    Rémi Prévost
    Victor Gonzalez
    Stephan Baumeister
    Ricky
    jfilip1024
    Chris Chambers
    Vitaly Bogdanov
    Patrick O'Loughlin (paddyoloughlin)
    Cam Thompson (camthompson)
    Marcin Kulik (sickill)
    Steve DeWald (sdewald)
    Ivan Necas (iNecas)
    George Ang (gnap)
    Evan Coury (EvanDotPro)
    Andrew Radev (AndrewRadev)
    Matt Gauger (mathias)
    Scott Stevenson (scottstvnsn)
    Anderson Freitas (andersonfreitas)
    Kamil K. Lemański (kml)
    Yehuda Katz (wycats)
    Min-Young Wu (minyoung)
    Benjamin Geiger (benjamingeiger)

==============================================================================
8. License                                                   *NERDTreeLicense*

The NERD tree is released under the wtfpl.
See http://sam.zoy.org/wtfpl/COPYING.
